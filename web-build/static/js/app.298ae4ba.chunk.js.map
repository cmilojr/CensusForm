{"version":3,"sources":["assets/LOGO.png","firebase.js","src/view/shared/TextInput.js","src/view/Form/InitFormScreen/index.js","src/view/shared/QuestionsType.js","src/view/shared/Pagination.js","src/view/Form/FormFirstPartScreen/index.js","src/view/Form/FormSecondPartScreen/index.js","src/view/Form/FormThirdPartScreen/index.js","src/view/Form/FormFourthPartScreen/index.js","src/view/Form/LastFormScreen/index.js","src/view/Form/FormStack.js","src/view/Auth/AuthScreen.js","src/view/Auth/RegisterScreen.js","src/view/shared/BackButton.js","src/view/FAQ/FAQScreen.js","src/view/ChatBox/ChatBoxScreen.js","src/view/Auth/AuthStack.js","src/Main.js","App.js","assets/finished.png","assets/avisos-03.png","assets/avisos-01.png","assets/avisos-02.png"],"names":["module","exports","app","TextInput","props","placeholder","leftIcon","label","value","onChangeText","editable","secureTextEntry","rightIcon","type","isError","onError","onRightIconPress","onLefttIconPress","multiline","autoCapitalize","_ref","useRef","useState","stateColor","setStateColor","message","error","setError","autoCompleteType","keyboardType","textContentType","_type","setType","useEffect","test","String","length","current","isFocused","styleInput","StyleSheet","create","style","alignItems","color","containerStyle","inputStyle","textAlign","paddingRight","leftIconContainerStyle","marginLeft","inputContainerStyle","height","width","marginTop","borderRadius","borderWidth","borderColor","errorMessage","name","size","onPress","labelStyle","textAlignVertical","selectionColor","placeholderTextColor","errorStyle","ref","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","code","auth","getAuth","readData","getDatabase","credentials","dbRef","console","log","get","child","updatedb","obj","db","update","signout","signOut","InitFormScreen","navigation","ECN","CFN","censusCredentials","setCensusCredentials","showErrorForm","Toast","show","text1","text2","checkFormCodes","then","snapshot","exists","navigate","catch","ScrollView","View","flex","flexDirection","backgroundColor","margin","padding","Text","fontWeight","fontSize","paddingTop","event","title","CheckAnswer","answerText","setAswer","isSelected","Pressable","marginHorizontal","marginBottom","CheckQuestion","question","answers","showOther","selectedAnswer","selected","setSelected","otherAnswer","setOtherAnswer","paddingBottom","marginVertical","textareaRows","map","key","val","TextQuestion","onChangeQuestion","valueQuestion","styles","container","justifyContent","position","bottom","selectedStyle","notSelectedStyle","Pagination","currentPage","checkFields","objectSave","routeSave","showToast","buttonStyle","FormFirstPartScreen","neighborhood","street","postalCode","phone","formFirstPart","setFormFirstPart","FormSecondPartScreen","householdMembers","maritalStatus","fullName","age","id","formSecondPart","setFormSecondPart","useLayoutEffect","undefined","FormThirdPartScreen","kindOfDwelling","houseAge","numberOfBedrooms","publicServices","formThirdPart","setFormThirdPart","FormFourthPartScreen","feedBack","formFourthPart","setFormFourthPart","LastFormScreen","Image","source","require","Stack","createStackNavigator","FormStack","Navigator","keyboardHandlingEnabled","Screen","component","options","headerShown","content","paddingVertical","AuthScreen","email","password","logginInfo","setLogginInfo","onSummit","signInWithEmailAndPassword","userCredential","user","contentContainerStyle","userName","fontColor","RegisterScreen","registerInfo","setRegisterInfo","createUserWithEmailAndPassword","setRegisterInfoInfo","goBack","BackButton","setBackAction","FAQScreen","setShowFAQ","showBack","rows","ChatBoxScreen","setShowHD","AuthStack","windowWidth","Dimensions","windowHeight","Main","logginState","setLogginState","onAuthStateChanged","uid","NavigationContainer","App","SafeAreaView"],"mappings":"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","file":"static/js/app.298ae4ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LOGO.81891b90.png\";","// Import the functions you need from the SDKs you need\r\nimport * as firebase from \"firebase/app\";\r\n\r\n//import firebase from 'firebase/compat/app';\r\nimport {\r\n  getDatabase,\r\n  ref,\r\n  set,\r\n  child,\r\n  get,\r\n  update\r\n} from \"firebase/database\";\r\nimport {\r\n  getAuth,\r\n  createUserWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n  signInWithEmailAndPassword,\r\n  signOut\r\n} from \"firebase/auth\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAXiU1FiNJHBpxawY7SsblCfFV5dRPH7rk\",\r\n  authDomain: \"bolumbia-e8c44.firebaseapp.com\",\r\n  databaseURL: \"https://bolumbia-e8c44-default-rtdb.firebaseio.com\",\r\n  projectId: \"bolumbia-e8c44\",\r\n  storageBucket: \"bolumbia-e8c44.appspot.com\",\r\n  messagingSenderId: \"1075351382092\",\r\n  appId: \"1:1075351382092:web:7e377c267cf064d34a6ce9\"\r\n};\r\n\r\n// Initialize Firebase\r\nlet app\r\nif (firebase.getApps().length === 0) {\r\n  app = firebase.initializeApp(firebaseConfig);\r\n} else {\r\n  app = firebase.app()\r\n}\r\n\r\nconst auth = getAuth()\r\nconst db = getDatabase(app); \r\n\r\n//-------------------\r\n/*\r\n\r\n// Refernece contactInfo collections\r\nlet contactInfo = firebase.database().ref(\"infos\");\r\n\r\n// Listen for a submit\r\ndocument.querySelector(\".contact-form\").addEventListener(\"submit\", submitForm);\r\n\r\nfunction submitForm(e) {\r\n  e.preventDefault();\r\n\r\n  //   Get input Values\r\n  let name = document.querySelector(\".name\").value;\r\n  let email = document.querySelector(\".email\").value;\r\n  let phone = document.querySelector(\".phone\").value;\r\n  let message = document.querySelector(\".message\").value;\r\n  console.log(name, email, message);\r\n\r\n  saveContactInfo(name, email, phone, message);\r\n\r\n  document.querySelector(\".contact-form\").reset();\r\n}\r\n\r\n// Save infos to Firebase\r\nfunction saveContactInfo(name, email, phone, message) {\r\n  let newContactInfo = contactInfo.push();\r\n\r\n  newContactInfo.set({\r\n    name: name,\r\n    email: email,\r\n    phone: phone,\r\n    message: message,\r\n  });\r\n}\r\n*/\r\n//------------------\r\n\r\nconst writeUserData = (route, obj) => {\r\n  set(ref(db, route), obj);\r\n}\r\n\r\nlet code\r\nconst codes = (ECN, CFN) => {\r\n  code = \"users/\"+ECN // + \"/\" + CFN\r\n}\r\n\r\nconst readData = (credentials) => {\r\n  const dbRef = ref(getDatabase());\r\n  if (credentials) {\r\n    console.log(credentials)\r\n    return get(child(dbRef, credentials))\r\n  }\r\n  return get(child(dbRef, code))\r\n}\r\n\r\nconst updatedb = (obj) => {\r\n  const db = getDatabase();\r\n  return update(ref(db, code), obj)\r\n}\r\n\r\nconst signout = () => {\r\n  const auth = getAuth();\r\n  return signOut(auth)\r\n}\r\n\r\nexport {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n  writeUserData,\r\n  readData,\r\n  updatedb,\r\n  auth,\r\n  ref,\r\n  set,\r\n  db,\r\n  codes,\r\n  signout,\r\n}","import React, {useEffect, useState, useRef} from 'react';\r\nimport {StyleSheet} from 'react-native';\r\nimport {Input} from 'react-native-elements';\r\nimport Icons from 'react-native-vector-icons/MaterialIcons';\r\n\r\nexport const TextInput = (props) => {\r\n  const {\r\n    placeholder = '',\r\n    leftIcon,\r\n    label = '',\r\n    value = '',\r\n    onChangeText,\r\n    editable,\r\n    secureTextEntry = false,\r\n    rightIcon,\r\n    type,\r\n    isError = false,\r\n    onError,\r\n    onRightIconPress,\r\n    onLefttIconPress,\r\n    multiline,\r\n    autoCapitalize\r\n  } = props\r\n\r\n  const _ref = useRef(null);\r\n  const [stateColor, setStateColor] = useState(`gray`);\r\n  const [error, setError] = useState({\r\n    isError: false,\r\n    message: '',\r\n  });\r\n\r\n  const [_type, setType] = useState({\r\n    autoCompleteType: 'off',\r\n    keyboardType: 'default',\r\n    textContentType: 'none',\r\n  });\r\n\r\n  useEffect(() => {\r\n    switch (type) {\r\n      case 'email':\r\n        setType({\r\n          autoCompleteType: 'email',\r\n          keyboardType: 'email-address',\r\n          textContentType: 'emailAddress',\r\n        });\r\n        break;\r\n      case 'number':\r\n        setType({\r\n          autoCompleteType: 'tel',\r\n          keyboardType: 'number-pad',\r\n          textContentType: 'telephoneNumber',\r\n        });\r\n        break;\r\n\r\n      default:\r\n        setType({\r\n          autoCompleteType: 'off',\r\n          keyboardType: 'default',\r\n          textContentType: 'none',\r\n        });\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    switch (type) {\r\n      case 'email':\r\n        if (value !== '' && value !== null) {\r\n          if (\r\n            /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\r\n              value,\r\n            )\r\n          ) {\r\n            setError({\r\n              isError: false,\r\n              message: '',\r\n            });\r\n            onError && onError(false);\r\n            setStateColor(`gray`);\r\n          } else {\r\n            onError && onError(true);\r\n            setError({\r\n              isError: true,\r\n              message: 'No es un correo valido',\r\n            });\r\n            setStateColor('red');\r\n          }\r\n        }\r\n        break;\r\n      case 'password':\r\n        if (value !== '' && value !== null) {\r\n          if (String(value).length <= 7) {\r\n            setError({\r\n              isError: true,\r\n              message: 'Minimo 8 caracteres',\r\n            });\r\n            onError && onError(true);\r\n            setStateColor('red');\r\n          } else {\r\n            setError({\r\n              isError: false,\r\n              message: '',\r\n            });\r\n            onError && onError(false);\r\n            setStateColor('gray');\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    if (isError) {\r\n      setError({\r\n        isError: true,\r\n        message: 'Campo requerido',\r\n      });\r\n      onError && onError(isError);\r\n      setStateColor('red');\r\n    } else {\r\n      setError({\r\n        isError: false,\r\n        message: '',\r\n      });\r\n      onError && onError(isError);\r\n      setStateColor(`gray`);\r\n    }\r\n  }, [isError === true]);\r\n\r\n  useEffect(() => {\r\n    if (_ref?.current?.isFocused() || value) {\r\n        setStateColor(`gray`);\r\n    } else {\r\n      //setStateColor(`${colors.text}80`);\r\n    }\r\n  }, [_ref?.current]);\r\n\r\n  const styleInput = StyleSheet.create({\r\n    style: {\r\n      alignItems: 'center',\r\n      color: stateColor,\r\n    },\r\n    containerStyle: {\r\n      alignItems: 'center',\r\n    },\r\n    inputStyle: {\r\n      color: stateColor,\r\n      alignItems: 'center',\r\n      textAlign: 'justify',\r\n      paddingRight: 20,\r\n    },\r\n    leftIconContainerStyle: {\r\n      marginLeft: 0,\r\n    },\r\n    inputContainerStyle: {\r\n      height: multiline ? 200 : 40,\r\n      width: '100%',\r\n      marginTop: 10,\r\n      textAlign: 'justify',\r\n      borderRadius: 7,\r\n      borderWidth: 1,\r\n      borderColor: stateColor,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Input\r\n      placeholder={placeholder}\r\n      autoCompleteType={_type.autoCompleteType}\r\n      keyboardType={_type.keyboardType}\r\n      textContentType={_type.textContentType}\r\n      label={label}\r\n      value={value}\r\n      errorMessage={error.isError ? error.message : ''}\r\n      onChangeText={onChangeText}\r\n      autoCapitalize={!autoCapitalize ? \"none\" : \"sentences\"}\r\n      editable={editable}\r\n      secureTextEntry={secureTextEntry}\r\n      multiline={multiline ? true : false}\r\n      leftIcon={\r\n        <Icons\r\n          name={leftIcon}\r\n          color={stateColor}\r\n          size={25}\r\n          style={{marginLeft: 10}}\r\n          onPress={onLefttIconPress}\r\n        />\r\n      }\r\n      rightIcon={\r\n        <Icons\r\n          name={rightIcon}\r\n          color={stateColor}\r\n          size={25}\r\n          onPress={onRightIconPress}\r\n        />\r\n      }\r\n      style={[styleInput.style]}\r\n      labelStyle={[{color: stateColor}]}\r\n      textAlignVertical=\"center\"\r\n      inputContainerStyle={styleInput.inputContainerStyle}\r\n      selectionColor={'gray'}\r\n      containerStyle={styleInput.containerStyle}\r\n      inputStyle={[styleInput.inputStyle]}\r\n      placeholderTextColor={stateColor}\r\n      leftIconContainerStyle={styleInput.leftIconContainerStyle}\r\n      errorStyle={{color: 'red'}}\r\n      ref={_ref}\r\n    />\r\n  );\r\n};\r\n","import React, { useState } from 'react'\r\nimport { View, Text, ScrollView } from 'react-native';\r\nimport { Button } from 'react-native-elements'\r\nimport { TextInput } from '../../shared/TextInput';\r\nimport {codes, readData, signout} from '../../../../firebase';\r\nimport Toast from 'react-native-toast-message';\r\n\r\nconst InitFormScreen = (props) => {\r\n    const { navigation } = props\r\n    const [censusCredentials, setCensusCredentials] = useState({ ECN: \"\", CFN: \"\" })\r\n\r\n    const showErrorForm = () => {\r\n        Toast.show({\r\n            type: 'error',\r\n            text1: 'Error: The codes ECN and CFN were not found.',\r\n            text2: 'Please check the information entered.'\r\n        });\r\n    }\r\n\r\n    const checkFormCodes = () => {\r\n        readData(\"users/\"+censusCredentials.ECN)        \r\n        .then((snapshot) => {\r\n            if (snapshot.exists()) {\r\n                codes(censusCredentials.ECN, censusCredentials.CFN)\r\n                navigation.navigate('FormFirstPart')\r\n            } else {\r\n                console.log(\"No data available\");\r\n                showErrorForm()\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error);\r\n            showErrorForm()\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ScrollView>\r\n            <View\r\n                style={{\r\n                    flex: 1,\r\n                    flexDirection: 'column',\r\n                    alignItems: 'center',\r\n                    backgroundColor: '#ababab'\r\n                }}>\r\n                <View style={{\r\n                    backgroundColor: 'white',\r\n                    margin: 20,\r\n                    padding: 20,\r\n                    borderRadius: 20,\r\n                }}>\r\n                    <Text style={{\r\n                        fontWeight: 'bold',\r\n                        fontSize: 30\r\n                    }}>Online Privacy Policy</Text>\r\n                    <Text style={{\r\n                        fontSize: 20,\r\n                        paddingTop: 20\r\n                    }}>\r\n                        The purpose of this policy is to explain how we handle information we collect during your visit to Census web sites. This policy does not apply to third-party web sites that you are able to access from our web sites, nor does it cover other Census Bureau information collection practices that do not happen on the Internet.\r\n\r\n                        We do not collect personally identifiable information (name, address, e-mail address, social security number, or other personal unique identifiers) or business identifiable information on our web sites unless we specifically advise you that we are doing so.\r\n                    </Text>\r\n\r\n                    <View style={{\r\n                        marginTop: 20\r\n                    }}>\r\n                        <Text style={{\r\n                            fontWeight: 'bold',\r\n                        }}>To initialize the Census App, please enter the CFN and ECN</Text>\r\n                        <TextInput\r\n                            placeholder=\"ECN\"\r\n                            type=\"text\"\r\n                            autoCapitalize={false}\r\n                            onChangeText={event => setCensusCredentials({ ...censusCredentials, ECN: event })}\r\n                            value={censusCredentials.ECN}\r\n                            rightIcon={'tag'}\r\n                        //onError={e => setIsErroruserName(e)}\r\n                        />\r\n                        <TextInput\r\n                            placeholder=\"CFN\"\r\n                            type=\"CFN\"\r\n                            autoCapitalize={false}\r\n                            onChangeText={event => setCensusCredentials({ ...censusCredentials, CFN: event })}\r\n                            value={censusCredentials.CFN}\r\n                            rightIcon={'insert-drive-file'}\r\n                        //onError={e => setIsErrorPassword(e)}\r\n                        />\r\n                    </View>\r\n                </View>\r\n                <View>\r\n                    <Button\r\n                        title='Start'\r\n                        onPress={() => {checkFormCodes()}}/>\r\n                    <Button\r\n                        containerStyle={{marginTop: 20}}\r\n                        title='Log Out'\r\n                        onPress={() => {\r\n                            signout()\r\n                                .then(() => {\r\n                                    console.log(\"Sign-out successful.\")\r\n                                }).catch((error) => {\r\n                                    // An error happened.\r\n                                    console.log(error)\r\n                                });\r\n                            }}/>\r\n                </View>    \r\n                <View style={{ height: 100 }} />\r\n            </View>\r\n        </ScrollView>\r\n    )\r\n}\r\n\r\nexport default InitFormScreen","import React, {useState, useEffect} from 'react'\r\nimport { Text, View, FlatList, Pressable } from 'react-native'\r\nimport { TextInput } from '../shared/TextInput'\r\nimport { Icon } from 'react-native-elements'\r\n\r\nconst CheckAnswer = (props) => {\r\n    const {onPress, answerText, setAswer, isSelected} = props\r\n    return (\r\n        <Pressable style={{\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            marginHorizontal: 10,\r\n            marginBottom: 5,\r\n            borderWidth: 5,\r\n            borderColor: 'gray',\r\n            borderRadius: 6,\r\n            padding: 10\r\n        }}\r\n        onPress={() => setAswer(answerText)}>\r\n            <Icon\r\n                name={!isSelected ? \"radio-button-unchecked\" : \"radio-button-checked\"}\r\n                onPress={onPress}\r\n                />\r\n            <Text style={{\r\n                marginLeft: 10,\r\n                fontSize: 19\r\n            }}>{answerText}</Text>\r\n        </Pressable>\r\n    )\r\n}\r\n\r\nexport const CheckQuestion = (props) => {\r\n    const {question, answers, setAswer, showOther, selectedAnswer} = props\r\n    const [selected, setSelected] = useState(\"\")\r\n    const [otherAnswer, setOtherAnswer] = useState(\"\")\r\n    \r\n    useEffect(() => {\r\n        setAswer(selected)\r\n    }, [selected])\r\n\r\n    useEffect(() => {\r\n        setSelected(\"\")\r\n        setAswer(otherAnswer)\r\n    }, [otherAnswer])\r\n\r\n    useEffect(() => {\r\n        setSelected(selectedAnswer)\r\n    }, [])\r\n\r\n    return (\r\n        <View style={{\r\n            marginHorizontal: 10,\r\n            borderWidth: 5,\r\n            borderRadius: 5,\r\n            backgroundColor: \"white\",\r\n            borderColor: '#a3a2a0',\r\n            paddingBottom: 10,\r\n            marginBottom: 10,\r\n        }}>\r\n            <Text style={{\r\n                marginHorizontal: 10,\r\n                marginTop: 10,\r\n                fontSize: 15,\r\n                fontWeight: 'bold',\r\n                marginVertical: 10,\r\n                textareaRows: 5,\r\n            }}>\r\n                {question}\r\n            </Text>\r\n            {answers.map((props,key) => {\r\n                return (\r\n                    <CheckAnswer \r\n                        answerText={props}\r\n                        setAswer={setSelected}\r\n                        isSelected={answers[key] === selected || answers[key] === selectedAnswer}\r\n                        />\r\n                )\r\n            })}\r\n            {\r\n                showOther && \r\n                    <TextInput \r\n                    onChangeText={(val) => setOtherAnswer(val)}\r\n                    placeholder={\"Other answer\"}\r\n                    value={selected === \"\" ? otherAnswer : \"\"}\r\n                    type=\"text\" \r\n                    />\r\n            }\r\n        </View>\r\n    )\r\n}\r\n\r\nexport const TextQuestion = (props) => {\r\n    const {\r\n        question, \r\n        placeholder, \r\n        onChangeQuestion, \r\n        valueQuestion, \r\n        multiline\r\n    } = props\r\n    return (\r\n        <View style={{\r\n            marginHorizontal: 20,\r\n            borderWidth: 1,\r\n            borderRadius: 10,\r\n            backgroundColor: \"white\",\r\n            borderColor: '#a3a2a0',\r\n            marginBottom: 10,\r\n        }}>\r\n            <Text style={{\r\n                marginHorizontal: 2,\r\n                marginTop: 1,\r\n                fontSize: 15,\r\n                fontWeight: 'bold'\r\n            }}>\r\n                {question}\r\n            </Text>\r\n            <TextInput \r\n                onChangeText={onChangeQuestion}\r\n                placeholder={placeholder}\r\n                value={valueQuestion}\r\n                type=\"text\" \r\n                multiline={multiline}\r\n                />\r\n        </View>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { View, StyleSheet } from 'react-native'\r\nimport { Button } from 'react-native-elements'\r\nimport { updatedb } from '../../../firebase';\r\n\r\nconst Pagination = (props) => {\r\n    const { \r\n        currentPage, \r\n        navigation, \r\n        checkFields, \r\n        routeSave, \r\n        objectSave,\r\n        showToast,\r\n    } = props\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Button\r\n                buttonStyle={currentPage === 1 ? styles.selectedStyle : styles.notSelectedStyle}\r\n                title='1'\r\n                onPress={() => {\r\n                    if (checkFields()) {\r\n                        updatedb(objectSave)\r\n                            .then(() => {\r\n                                currentPage !== 1 && navigation.navigate(\"FormFirstPart\")\r\n                            })\r\n                            .catch((error) => {\r\n                                showToast()\r\n                            });\r\n                    } else {\r\n                        showToast()\r\n                    }\r\n                }} />\r\n            <Button\r\n                buttonStyle={currentPage === 2 ? styles.selectedStyle : styles.notSelectedStyle}\r\n                title='2'\r\n                onPress={() => {\r\n                    if (checkFields()) {\r\n                        updatedb(objectSave)\r\n                            .then(() => {\r\n                                currentPage !== 2 && navigation.navigate(\"FormSecondPart\")\r\n                            })\r\n                            .catch((error) => {\r\n                                showToast()\r\n                            });\r\n                    } else {\r\n                        showToast()\r\n                    }   \r\n                }} />\r\n            <Button\r\n                buttonStyle={currentPage === 3 ? styles.selectedStyle : styles.notSelectedStyle}\r\n                title='3'\r\n                onPress={() => {\r\n                    if (checkFields()) {\r\n                        updatedb(objectSave)\r\n                            .then(() => {\r\n                                currentPage !== 3 && navigation.navigate(\"FormThirdPart\")\r\n                            })\r\n                            .catch((error) => {\r\n                                showToast()\r\n                            });\r\n                    } else {\r\n                        showToast()\r\n                    }\r\n                }} />\r\n            <Button\r\n                buttonStyle={currentPage === 4 ? styles.selectedStyle : styles.notSelectedStyle}\r\n                title='4'\r\n                onPress={() => {\r\n                    if (checkFields()) {\r\n                        updatedb(objectSave)\r\n                            .then(() => {\r\n                                currentPage !== 4 && navigation.navigate(\"FormFourthPart\")\r\n                            })\r\n                            .catch((error) => {\r\n                                showToast()\r\n                            });\r\n                    } else {\r\n                        showToast()\r\n                    }\r\n                }} />\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        justifyContent: 'space-around',\r\n        flexDirection: 'row',\r\n        position: 'absolute',\r\n        bottom: 100,\r\n        width: '50%',\r\n    },\r\n    selectedStyle: {\r\n\r\n    },\r\n    notSelectedStyle: {\r\n        backgroundColor: 'gray',\r\n    }\r\n})\r\n\r\nexport default Pagination","import React, { useState, useEffect } from 'react'\r\nimport { View, Text, ScrollView } from 'react-native'\r\nimport { TextQuestion } from '../../shared/QuestionsType'\r\nimport Pagination from '../../shared/Pagination'\r\nimport Toast from 'react-native-toast-message';\r\nimport {readData} from '../../../../firebase';\r\n\r\nconst FormFirstPartScreen = (props) => {\r\n    const [formFirstPart, setFormFirstPart] = useState({\r\n        neighborhood: \"\",\r\n        street: \"\",\r\n        postalCode: \"\",\r\n        phone: \"\"\r\n    })\r\n\r\n    const showToast = () => {\r\n        Toast.show({\r\n            type: 'error',\r\n            text1: 'Error',\r\n            text2: 'Please fill the empty fields.'\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        readData()        \r\n            .then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    if(snapshot.val().formFirstPart){\r\n                        setFormFirstPart(snapshot.val().formFirstPart)\r\n                    }\r\n                return(snapshot.val())\r\n                } else {\r\n                console.log(\"No data available\");\r\n                }\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            });\r\n    }, [])\r\n\r\n    const checkFields = () => {\r\n        return formFirstPart.neighborhood !== \"\" && \r\n        formFirstPart.street !== \"\" && \r\n        formFirstPart.postalCode !== \"\" && \r\n        formFirstPart.phone !== \"\"\r\n    }\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                flex: 1,\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                backgroundColor: '#ababab'\r\n            }}>\r\n            <Text style={{\r\n                fontWeight: 'bold',\r\n                fontSize: 32,\r\n                margin: 20\r\n            }}>House Information</Text>\r\n            <ScrollView style={{\r\n                width: '100%',\r\n            }}>\r\n                <TextQuestion\r\n                    question=\"Neighborhood\"\r\n                    placeholder=\"e.g. Los Santos\"\r\n                    onChangeQuestion={(neighborhood) => setFormFirstPart({ ...formFirstPart, neighborhood })}\r\n                    valueQuestion={formFirstPart.neighborhood} />\r\n                <TextQuestion\r\n                    question=\"Street Address\"\r\n                    placeholder=\"e.g. 600 N Clark St\"\r\n                    onChangeQuestion={(street) => setFormFirstPart({ ...formFirstPart, street })}\r\n                    valueQuestion={formFirstPart.street} />\r\n                <TextQuestion\r\n                    question=\"Poscal Code\"\r\n                    placeholder=\"e.g. 50204\"\r\n                    onChangeQuestion={(postalCode) => setFormFirstPart({ ...formFirstPart, postalCode })}\r\n                    valueQuestion={formFirstPart.postalCode} />\r\n                <TextQuestion\r\n                    question=\"Phone number\"\r\n                    placeholder=\"e.g. 5628692\"\r\n                    onChangeQuestion={(phone) => setFormFirstPart({ ...formFirstPart, phone })}\r\n                    valueQuestion={formFirstPart.phone} />\r\n                <View style={{\r\n                    height: 150\r\n                }} />\r\n            </ScrollView>\r\n\r\n            <Pagination \r\n                currentPage={1} \r\n                navigation={props.navigation} \r\n                checkFields={checkFields} \r\n                showToast={showToast}\r\n                objectSave={{\r\n                    formFirstPart:formFirstPart\r\n                }}/>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default FormFirstPartScreen","import React, {useState, useEffect, useLayoutEffect} from 'react'\r\nimport { View, Text, ScrollView} from 'react-native'\r\nimport {CheckQuestion, TextQuestion} from '../../shared/QuestionsType'\r\nimport Pagination from '../../shared/Pagination'\r\nimport {readData} from '../../../../firebase';\r\nimport Toast from 'react-native-toast-message';\r\n\r\nconst FormSecondPartScreen = (props) => {\r\n    const [formSecondPart, setFormSecondPart] = useState({\r\n        householdMembers: \"\",\r\n        maritalStatus: \"\",\r\n        fullName: \"\",\r\n        age: \"\",\r\n        id: \"\",\r\n    })\r\n\r\n    const showToast = () => {\r\n        Toast.show({\r\n            type: 'error',\r\n            text1: 'Error',\r\n            text2: 'Please fill the empty fields.'\r\n        });\r\n    }\r\n\r\n    const checkFields = () => {\r\n        return formSecondPart.householdMembers !== \"\" && \r\n        formSecondPart.maritalStatus !== \"\" && \r\n        formSecondPart.fullName !== \"\" && \r\n        formSecondPart.id !== \"\" && \r\n        formSecondPart.age !== \"\"\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        readData()        \r\n            .then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    if(snapshot.val().formSecondPart !== undefined) {\r\n                        setFormSecondPart(snapshot.val().formSecondPart)\r\n                    }\r\n                } else {\r\n                console.log(\"No data available\");\r\n                }\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            });\r\n    }, [])\r\n\r\n    return (\r\n        <View \r\n        style={{\r\n            flex: 1, \r\n            flexDirection: 'column', \r\n            alignItems: 'center',\r\n            backgroundColor: '#ababab'\r\n        }}>\r\n            <Text style={{\r\n                fontWeight: 'bold',\r\n                fontSize: 32,\r\n                margin: 20\r\n            }}>Home Members</Text>\r\n            <ScrollView style={{\r\n                width: '100%',\r\n            }}>\r\n                <TextQuestion \r\n                    question=\"Number of household members\"\r\n                    placeholder=\"e.g. 3\" \r\n                    onChangeQuestion={householdMembers => setFormSecondPart({...formSecondPart, householdMembers})} \r\n                    valueQuestion={formSecondPart.householdMembers}/>\r\n                <TextQuestion \r\n                    question=\"Full name\"\r\n                    placeholder=\"e.g. Yolanda Squatpump\" \r\n                    onChangeQuestion={fullName => setFormSecondPart({...formSecondPart, fullName})} \r\n                    valueQuestion={formSecondPart.fullName}/>\r\n                <TextQuestion \r\n                    question=\"Age\"\r\n                    placeholder=\"e.g. 24\" \r\n                    onChangeQuestion={age => setFormSecondPart({...formSecondPart, age})} \r\n                    valueQuestion={formSecondPart.age}/>\r\n                <TextQuestion \r\n                    question=\"ID number\"\r\n                    placeholder=\"e.g. 241020303\" \r\n                    onChangeQuestion={id => setFormSecondPart({...formSecondPart, id})} \r\n                    valueQuestion={formSecondPart.id}/>\r\n                <CheckQuestion \r\n                    setAswer={maritalStatus => setFormSecondPart({...formSecondPart, maritalStatus})} \r\n                    question=\"Marital Status\"\r\n                    selectedAnswer={formSecondPart.maritalStatus}\r\n                    answers={[\r\n                        \"Single\",\r\n                        \"Married\",\r\n                        \"Concubinage / Consensual Union Widowed\",\r\n                        \"Separated\",\r\n                        \"Divorced\",\r\n                        \"Do not know, no answer\",\r\n                    ]} \r\n                    />\r\n                <View style={{\r\n                    height: 150\r\n                }}/>\r\n            </ScrollView>\r\n\r\n            <Pagination \r\n                currentPage={2} \r\n                navigation={props.navigation} \r\n                checkFields={checkFields}\r\n                showToast={showToast}\r\n                objectSave={{\r\n                    formSecondPart:formSecondPart\r\n                }}/>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default FormSecondPartScreen","import React, {useState, useEffect} from 'react'\r\nimport { View, Text, ScrollView} from 'react-native'\r\nimport Pagination from '../../shared/Pagination'\r\nimport {CheckQuestion, TextQuestion} from '../../shared/QuestionsType'\r\nimport {readData} from '../../../../firebase';\r\nimport Toast from 'react-native-toast-message';\r\n\r\nconst FormThirdPartScreen = (props) => {\r\n    const [formThirdPart, setFormThirdPart] = useState({\r\n        kindOfDwelling: \"\",\r\n        houseAge: \"\",\r\n        numberOfBedrooms: \"\",\r\n        publicServices: \"\",\r\n    })\r\n\r\n    const showToast = () => {\r\n        Toast.show({\r\n            type: 'error',\r\n            text1: 'Error',\r\n            text2: 'Please fill the empty fields.'\r\n        });\r\n    }\r\n\r\n    const checkFields = () => {\r\n        return formThirdPart.kindOfDwelling !== \"\" &&\r\n        formThirdPart.houseAge !== \"\" &&\r\n        formThirdPart.numberOfBedrooms !== \"\" &&\r\n        formThirdPart.publicServices !== \"\"\r\n    }\r\n\r\n    useEffect(() => {\r\n        readData()        \r\n            .then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    if(snapshot.val().formThirdPart !== undefined){\r\n                        setFormThirdPart(snapshot.val().formThirdPart)\r\n                    }\r\n                return(snapshot.val())\r\n                } else {\r\n                console.log(\"No data available\");\r\n                }\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            });\r\n    }, [])\r\n\r\n    return (\r\n        <View \r\n            style={{\r\n                flex: 1, \r\n                flexDirection: 'column', \r\n                alignItems: 'center',\r\n                backgroundColor: '#ababab'\r\n            }}>\r\n            <Text style={{\r\n                fontWeight: 'bold',\r\n                fontSize: 32,\r\n                margin: 20\r\n            }}>Dwelling Information</Text>\r\n            <ScrollView style={{\r\n                width: '100%',\r\n            }}>\r\n                <CheckQuestion \r\n                    setAswer={(kindOfDwelling) => setFormThirdPart({...formThirdPart, kindOfDwelling})}\r\n                    question=\"Type of dwelling\"\r\n                    selectedAnswer={formThirdPart.kindOfDwelling}\r\n                    answers={[\r\n                        \"Independent housing\",\r\n                        \"Apartment\",\r\n                        \"Room in collective housing\",\r\n                        \"Worker camps\",\r\n                        \"Student residence\",\r\n                        \"Nursing home\",\r\n                        \"Schools / boarding schools\",\r\n                        \"Religious order\",\r\n                        \"Cooperation organization\",\r\n                        \"Do not know, no answer\"\r\n                    ]} \r\n                    />\r\n                <CheckQuestion \r\n                    question=\"How old is the house?\"\r\n                    setAswer={(houseAge) => setFormThirdPart({...formThirdPart, houseAge})}\r\n                    selectedAnswer={formThirdPart.houseAge}\r\n                    answers={[\r\n                        \"Less than 6 years\",\r\n                        \"Between 6 and 10 years\",\r\n                        \"Between 11 and 15 years\",\r\n                        \"Between 16 and 20 years\",\r\n                        \"Between 21 and 25 years\",\r\n                        \"More than 25 years\",\r\n                        \"Do not know, no answer\",\r\n                    ]} \r\n                    />\r\n                <TextQuestion\r\n                    question=\"Number of bedrooms\"\r\n                    placeholder=\"e.g. 2\" \r\n                    onChangeQuestion={(numberOfBedrooms) => setFormThirdPart({ ...formThirdPart, numberOfBedrooms })}\r\n                    valueQuestion={formThirdPart.numberOfBedrooms} />\r\n                <CheckQuestion \r\n                    question=\"Access to public services?\"\r\n                    setAswer={(publicServices) => setFormThirdPart({...formThirdPart, publicServices})}\r\n                    selectedAnswer={formThirdPart.publicServices}\r\n                    answers={[\r\n                        \"Yes\",\r\n                        \"No\",\r\n                    ]} \r\n                    />\r\n                <View style={{\r\n                    height: 150\r\n                }}/>\r\n            </ScrollView>\r\n            <Pagination \r\n                currentPage={3} \r\n                navigation={props.navigation} \r\n                checkFields={checkFields} \r\n                showToast={showToast}\r\n                objectSave={{\r\n                    formThirdPart:formThirdPart\r\n                }}/>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default FormThirdPartScreen","import React, { useState, useEffect } from 'react'\r\nimport { View, Text } from 'react-native'\r\nimport Pagination from '../../shared/Pagination'\r\nimport { TextQuestion } from '../../shared/QuestionsType'\r\nimport {readData} from '../../../../firebase';\r\nimport Toast from 'react-native-toast-message';\r\nimport { Button } from 'react-native-elements'\r\n\r\nconst FormFourthPartScreen = (props) => {\r\n    const [formFourthPart, setFormFourthPart] = useState({\r\n        feedBack: \"\"\r\n    })\r\n    const checkFields = () => {\r\n        return formFourthPart.feedBack !== \"\"\r\n    }\r\n\r\n    const showToast = () => {\r\n        Toast.show({\r\n            type: 'error',\r\n            text1: 'Error',\r\n            text2: 'Please fill the empty fields.'\r\n        });\r\n    }\r\n    \r\n    useEffect(() => {\r\n        readData()        \r\n            .then((snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    if(snapshot.val().formFourthPart) {\r\n                        setFormFourthPart(snapshot.val().formFourthPart)\r\n                    }\r\n                return(snapshot.val())\r\n                } else {\r\n                console.log(\"No data available\");\r\n                }\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            });\r\n    }, [])\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                flex: 1,\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                backgroundColor: '#ababab'\r\n            }}>\r\n            <Text style={{\r\n                fontWeight: 'bold',\r\n                fontSize: 32,\r\n                margin: 20\r\n            }}>Feedback</Text>\r\n\r\n            <TextQuestion\r\n                question=\"Please entrer feedback about the census experience\"\r\n                placeholder=\"e.g. Amazing experience\"\r\n                onChangeQuestion={(feedBack) => setFormFourthPart({feedBack})}\r\n                valueQuestion={formFourthPart.feedBack}\r\n                multiline={true} />\r\n            <Button\r\n                title='Finish'\r\n                onPress={() => { props.navigation.navigate(\"LastForm\") }} />\r\n            <Pagination\r\n                currentPage={4}\r\n                navigation={props.navigation}\r\n                checkFields={checkFields}\r\n                showToast={showToast}\r\n                objectSave={{\r\n                    formFourthPart: formFourthPart\r\n                }} />\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default FormFourthPartScreen","import React from 'react'\r\nimport { View, Text, Image } from 'react-native';\r\nimport { Button } from 'react-native-elements'\r\nimport { signout } from '../../../../firebase';\r\nimport Toast from 'react-native-toast-message';\r\n\r\nconst LastFormScreen = (props) => {\r\n\r\n    const showErrorForm = () => {\r\n        Toast.show({\r\n            type: 'error',\r\n            text1: 'Error: The codes ECN and CFN were not found.',\r\n            text2: 'Please check the information entered.'\r\n        });\r\n    }\r\n\r\n    return (\r\n\r\n        <View\r\n            style={{\r\n                flex: 1,\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                backgroundColor: '#ababab',\r\n                height: '100%'\r\n            }}>\r\n            <View style={{\r\n                backgroundColor: 'white',\r\n                margin: 20,\r\n                padding: 20,\r\n                borderRadius: 20,\r\n            }}>\r\n                <Text style={{\r\n                    fontWeight: 'bold',\r\n                    fontSize: 30\r\n                }}>Form completed</Text>\r\n\r\n                <View style={{\r\n                    marginTop: 20\r\n                }}>\r\n                    <Text style={{\r\n                        fontWeight: 'bold',\r\n                    }}>You have successfully completed the census form, thank you for your cooperation.</Text>\r\n                    <Image\r\n                        style={{\r\n                            width: 250,\r\n                            height: 150,\r\n                        }}\r\n                        source={require('../../../../assets/finished.png')}\r\n                    />\r\n                </View>\r\n            </View>\r\n            <View>\r\n                <Button\r\n                    containerStyle={{ marginTop: 20 }}\r\n                    title='Log Out'\r\n                    onPress={() => {\r\n                        signout()\r\n                            .then(() => {\r\n                                console.log(\"Sign-out successful.\")\r\n                            }).catch((error) => {\r\n                                // An error happened.\r\n                                console.log(error)\r\n                            });\r\n                    }} />\r\n            </View>\r\n            <View style={{ height: 100 }} />\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default LastFormScreen","import React from 'react';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport InitFormScreen from './InitFormScreen';\r\nimport FormFirstPartScreen from './FormFirstPartScreen/index';\r\nimport FormSecondPartScreen from './FormSecondPartScreen/index'\r\nimport FormThirdPartScreen from './FormThirdPartScreen/index'\r\nimport FormFourthPartScreen from './FormFourthPartScreen/index'\r\nimport LastFormScreen from './LastFormScreen'\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nconst FormStack = () => {\r\n  return (\r\n    <Stack.Navigator keyboardHandlingEnabled>\r\n      <Stack.Screen\r\n        name=\"InitForm\"\r\n        component={InitFormScreen}\r\n        options={{\r\n          headerShown: false,\r\n        }}\r\n      />\r\n      <Stack.Screen\r\n        name=\"FormFirstPart\"\r\n        component={FormFirstPartScreen}\r\n        options={{\r\n          headerShown: false,\r\n        }}\r\n      />\r\n      <Stack.Screen\r\n        name=\"FormSecondPart\"\r\n        component={FormSecondPartScreen}\r\n        options={{\r\n          headerShown: false,\r\n        }}\r\n      />\r\n      <Stack.Screen\r\n        name=\"FormThirdPart\"\r\n        component={FormThirdPartScreen}\r\n        options={{\r\n          headerShown: false,\r\n        }}\r\n      />\r\n      <Stack.Screen\r\n        name=\"FormFourthPart\"\r\n        component={FormFourthPartScreen}\r\n        options={{\r\n          headerShown: false,\r\n        }}\r\n      />\r\n      <Stack.Screen\r\n        name=\"LastForm\"\r\n        component={LastFormScreen}\r\n        options={{\r\n          headerShown: false,\r\n        }}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nexport default FormStack;\r\n","import React, { useState } from \"react\";\r\nimport { View, StyleSheet, Image } from \"react-native\";\r\nimport { Button } from \"react-native-elements\";\r\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\r\nimport { TextInput } from \"../shared/TextInput\";\r\nimport { signInWithEmailAndPassword, auth } from \"../../../firebase\";\r\nimport Toast from \"react-native-toast-message\";\r\n\r\nconst AuthScreen = (props) => {\r\n  const [logginInfo, setLogginInfo] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const showError = (message) => {\r\n    Toast.show({\r\n      type: \"error\",\r\n      text1: \"Error: The codes ECN and CFN were not found.\",\r\n      text2: message,\r\n    });\r\n  };\r\n\r\n  const onSummit = () => {\r\n    signInWithEmailAndPassword(auth, logginInfo.email, logginInfo.password)\r\n      .then((userCredential) => {\r\n        // Signed in\r\n        const user = userCredential.user;\r\n      })\r\n      .catch((error) => {\r\n        const errorCode = error.code;\r\n        const errorMessage = error.message;\r\n        showError(errorMessage);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <KeyboardAwareScrollView contentContainerStyle={styles.container}>\r\n      <View style={styles.content}>\r\n        <View\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            margin: 20,\r\n            padding: 20,\r\n            borderRadius: 20,\r\n          }}\r\n        >\r\n          <View\r\n            style={{\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Image\r\n              style={{\r\n                width: 250,\r\n                height: 150,\r\n              }}\r\n              source={require(\"../../../assets/LOGO.png\")}\r\n            />\r\n\r\n            <Image\r\n              style={{\r\n                width: 900,\r\n                height: 500,\r\n              }}\r\n              source={require(\"../../../assets/avisos-03.png\")}\r\n            />\r\n          </View>\r\n            <p><center>\r\n            Welcome to the ECS, Bolumbia's Electronic Census System. With this tool you can answer the annual census form in a easier and hassle free way. \r\n            Please take into account that the data used to answer this census form must be de data that's correct according to the Census Night status of your dwelling.\r\n            </center></p>\r\n            {\" \"}\r\n            <p><center>\r\n            To create an account you must have the ECS and CFN credentials at hand, as they will be neccessary to create an account for the proccess.\r\n            If you already created an account log in below using your registered email and password.\r\n            </center></p>\r\n\r\n\r\n          <TextInput\r\n            placeholder=\"Email\"\r\n            type=\"text\"\r\n            autoCapitalize={false}\r\n            onChangeText={(event) =>\r\n              setLogginInfo({\r\n                ...logginInfo,\r\n                userName: event,\r\n              })\r\n            }\r\n            value={logginInfo.userName}\r\n            rightIcon={\"tag\"}\r\n            //onError={e => setIsErroruserName(e)}\r\n          />{\" \"}\r\n          <TextInput\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n            autoCapitalize={false}\r\n            secureTextEntry={true}\r\n            onChangeText={(event) =>\r\n              setLogginInfo({\r\n                ...logginInfo,\r\n                password: event,\r\n              })\r\n            }\r\n            value={logginInfo.password}\r\n            rightIcon={\"insert-drive-file\"}\r\n            //onError={e => setIsErrorPassword(e)}\r\n          />{\" \"}\r\n          <Button\r\n            title=\"Login\"\r\n            onPress={() => onSummit()}\r\n            containerStyle={{\r\n              height: 40,\r\n            }}\r\n            fontColor=\"textBgPrimary\"\r\n          />\r\n        </View>{\" \"}\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Button\r\n            title=\"Sign Up\"\r\n            onPress={() => props.navigation.navigate(\"RegisterScreen\")}\r\n            containerStyle={{\r\n              height: 40,\r\n              margin: 20,\r\n            }}\r\n            fontColor=\"textBgPrimary\"\r\n          />\r\n          <Button\r\n            title=\"FAQ\"\r\n            //onPress={() => setShowFAQ(true)}\r\n            //onPress={() => props.navigation.navigate(\"../FAQ/FAQScreen\")}\r\n            onPress={() => props.navigation.navigate(\"FAQScreen\")}\r\n            containerStyle={{\r\n              height: 40,\r\n              margin: 20,\r\n            }}\r\n            fontColor=\"textBgPrimary\"\r\n          />\r\n          <Button\r\n            title=\"Helping Desk\"\r\n            //onPress={() => setShowHD(true)}\r\n            //onPress={() => props.navigation.navigate(\"../ChatBox/ChatBoxScreen\")}\r\n            onPress={() => props.navigation.navigate(\"ChatBoxScreen\")}\r\n            containerStyle={{\r\n              height: 40,\r\n              margin: 20,\r\n            }}\r\n            fontColor=\"textBgPrimary\"\r\n          />\r\n        </View>{\" \"}\r\n      </View>{\" \"}\r\n    </KeyboardAwareScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flex: 1,\r\n    backgroundColor: \"#ababab\",\r\n  },\r\n  content: {\r\n    width: \"100%\",\r\n    justifyContent: \"space-around\",\r\n    paddingVertical: 1,\r\n  },\r\n});\r\n\r\nexport default AuthScreen;\r\n","import React, { useState } from 'react'\r\nimport { Text, View, StyleSheet, Image } from 'react-native'\r\nimport { Button } from 'react-native-elements'\r\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\r\nimport { TextInput } from '../shared/TextInput'\r\nimport { auth, createUserWithEmailAndPassword } from \"../../../firebase\";\r\nimport Toast from 'react-native-toast-message';\r\n\r\nconst RegisterScreen = (props) => {\r\n    const [registerInfo, setRegisterInfo] = useState({ email: '', password: '' });\r\n\r\n    const showError = (message) => {\r\n        Toast.show({\r\n            type: 'error',\r\n            text1: 'Error: The codes ECN and CFN were not found.',\r\n            text2: message\r\n        });\r\n    }\r\n\r\n    const onSummit = () => {\r\n        createUserWithEmailAndPassword(auth, registerInfo.email, registerInfo.password)\r\n            .then((userCredential) => {\r\n                // Signed in\r\n                const user = userCredential.user;\r\n                setRegisterInfoInfo({ email: '', password: '' })\r\n            })\r\n            .catch((error) => {\r\n                const errorCode = error.code;\r\n                const errorMessage = error.message;\r\n                showError(errorMessage)\r\n            })\r\n        props.navigation.goBack()\r\n    }\r\n\r\n    return (\r\n        <KeyboardAwareScrollView contentContainerStyle={styles.container}>\r\n            <View style={styles.content}>\r\n                <View style={{\r\n                    backgroundColor: 'white',\r\n                    margin: 20,\r\n                    padding: 20,\r\n                    borderRadius: 20,\r\n                }}>\r\n                    <View style={{\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <Image\r\n                            style={{\r\n                                width: 250,\r\n                                height: 150,\r\n                            }}\r\n                            source={require('../../../assets/LOGO.png')}\r\n                        />\r\n                        <Image\r\n                            style={{\r\n                                width: 1000,\r\n                                height: 500,\r\n                            }}\r\n                            source={require('../../../assets/avisos-01.png')}\r\n                        />\r\n\r\n                        <p><center>\r\n                        To create an account you will need your email, the ECN code and CFN code provided in the Census Notification.\r\n                        </center></p>\r\n                        {\" \"}\r\n                        <p><center>\r\n                        Remember to store your password in a safe place and never share it with anyone, no one from the Census Center will ever ask you for your password at any moment.\r\n                        In case of any irregularities please contact a Census Agent immediately. \r\n                        </center></p>\r\n                    </View>\r\n\r\n                    <TextInput\r\n                        placeholder=\"Email\"\r\n                        type=\"text\"\r\n                        autoCapitalize={false}\r\n                        onChangeText={event => setRegisterInfo({ ...registerInfo, email: event })}\r\n                        value={registerInfo.email}\r\n                        rightIcon={'tag'}\r\n                    //onError={e => setIsErroruserName(e)}\r\n                    />\r\n                    <TextInput\r\n                        placeholder=\"Password\"\r\n                        type=\"password\"\r\n                        autoCapitalize={false}\r\n                        onChangeText={event => setRegisterInfo({ ...registerInfo, password: event })}\r\n                        value={registerInfo.password}\r\n                        rightIcon={'insert-drive-file'}\r\n                    //onError={e => setIsErrorPassword(e)}\r\n                    />\r\n                    <Button\r\n                        title=\"Register\"\r\n                        onPress={() => onSummit()}\r\n                        containerStyle={{ height: 40 }}\r\n                        fontColor=\"textBgPrimary\"\r\n                    />\r\n                    <Button\r\n                        title=\"Back\"\r\n                        onPress={() => props.navigation.goBack()}\r\n                        containerStyle={{ height: 40, marginTop: 20 }}\r\n                        fontColor=\"textBgPrimary\"\r\n                    />\r\n                </View>\r\n            </View>\r\n        </KeyboardAwareScrollView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flex: 1,\r\n        backgroundColor: '#ababab'\r\n    },\r\n    content: {\r\n        width: '100%',\r\n        justifyContent: 'space-around',\r\n        paddingVertical: 1\r\n    }\r\n})\r\n\r\nexport default RegisterScreen","import React from 'react'\r\nimport { View, StyleSheet } from 'react-native'\r\nimport { Button } from 'react-native-elements'\r\n\r\nconst BackButton = (props) => {\r\n    const {setBackAction} = props\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Button \r\n                title='Back'\r\n                onPress={() => setBackAction(false)}/>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        justifyContent: 'space-around', \r\n        flexDirection: 'row', \r\n        position: 'absolute',\r\n        bottom: 100,\r\n        width: '50%',\r\n    },\r\n})\r\n\r\nexport default BackButton","import React from 'react'\r\nimport { View, Text, ScrollView} from 'react-native'\r\nimport {TextQuestion} from '../shared/QuestionsType'\r\nimport BackButton from '../shared/BackButton'\r\nimport { Button } from 'react-native-elements'\r\n\r\n\r\nconst FAQScreen = (props) => {\r\n    const {setShowFAQ, showBack} = props\r\n    return (\r\n        <View \r\n            style={{\r\n                flex: 1, \r\n                flexDirection: 'column', \r\n                alignItems: 'center',\r\n                backgroundColor: '#d5d5d5'\r\n            }}>\r\n            <Text style={{\r\n                fontWeight: 'bold',\r\n                fontSize: 32,\r\n                margin: 5\r\n            }}>Frequently Asked Questions </Text>\r\n            <ScrollView style={{\r\n                width: '95%',\r\n            }}>\r\n                <TextQuestion\r\n                    question=\"Why my participation is important?\"\r\n                    valueQuestion=\"Your answers help produce accurate, reliable statistics on employment, infrastructure, education, economic opportunities, and other important characteristics of your community. This information helps policymakers, local officials, companies, and organizations to understand and assess the resources and needs of people, places, and businesses across the country. None of this would be possible without your participation.\"\r\n                    editable={false}\r\n                    multiline={true}\r\n                    rows={10}/>\r\n                <TextQuestion \r\n                    question=\"How can I complete this survey?\"\r\n                    valueQuestion=\"In addition to conducting the 2020 Census, the Census Bureau oversees many surveys that are generally completed in-person, by mail, online, or by telephone. For more information about completing a particular survey, you can search the Census list of surveys and read more about what your options are for responding.\"\r\n                    editable={false}\r\n                    multiline={true}/>\r\n                <TextQuestion \r\n                    question=\"How my answers will be used?\"\r\n                    valueQuestion=\"All information that you provide in a Census Bureau survey or census is used exclusively to create accurate, relevant statistics about the nation’s people, places, and economy. These statistics help inform elected officials about communities and businesses across Bolumbia.\"\r\n                    editable={false}\r\n                    multiline={true}/>\r\n                <TextQuestion \r\n                    question=\"Whom do I contact if I have additional questions, recommendations, or issues?\"\r\n                    valueQuestion=\"If you have questions regarding the Census, data products, or general information call the Census Customer Service Center at 1-800-923-8282.\r\n\r\n                    If you need assistance in verifying a Census Bureau survey mailing, call, or in-person interview, contact the Census Bureau Regional Office associated with your state.\r\n                    \r\n                    If you have questions regarding data policies or a FOIA request, contact the Policy Office.\r\n                    \r\n                    If you have additional issues or concerns that are not addressed above, please contact the Office of the Respondent Advocate.\"\r\n                    editable={false}\r\n                    multiline={true}/>\r\n                <Button\r\n                    title=\"Back\"\r\n                    onPress={() => props.navigation.goBack()}\r\n                    containerStyle={{ height: 45, marginTop: 20 }}\r\n                    fontColor=\"textBgPrimary\"\r\n                    />\r\n                <View style={{\r\n                    height: 250\r\n                    \r\n                }}/>\r\n                </ScrollView>\r\n                {\r\n                    showBack && <BackButton setBackAction={setShowFAQ} />      \r\n                }  \r\n        </View>\r\n    )\r\n}\r\n\r\nexport default FAQScreen","import React from \"react\";\r\nimport { View, Text, ScrollView, Image } from \"react-native\";\r\nimport BackButton from \"../shared/BackButton\";\r\nimport { TextQuestion } from \"../shared/QuestionsType\";\r\nimport { Button } from \"react-native-elements\";\r\n\r\nconst ChatBoxScreen = (props) => {\r\n  const { setShowHD, showBack } = props;\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"#d5d5d5\",\r\n      }}\r\n    >\r\n      <View\r\n        style={{\r\n          backgroundColor: \"white\",\r\n          margin: 20,\r\n          padding: 20,\r\n          borderRadius: 20,\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Text\r\n          style={{\r\n            fontWeight: \"bold\",\r\n            fontSize: 32,\r\n            margin: 20,\r\n          }}\r\n        >\r\n          {\" \"}\r\n          Talk with Us{\" \"}\r\n        </Text>\r\n\r\n        <Image\r\n          style={{\r\n            width: 1000,\r\n            height: 500,\r\n          }}\r\n          source={require(\"../../../assets/avisos-02.png\")}\r\n        />\r\n\r\n        <ScrollView\r\n          style={{\r\n            width: \"10%\",\r\n          }}\r\n        >\r\n          <View\r\n            style={{\r\n              height: 150,\r\n              alignItems: \"center\",\r\n            }}\r\n          />\r\n\r\n          <Button\r\n            title=\"Back\"\r\n            onPress={() => props.navigation.goBack()}\r\n            containerStyle={{ height: 40, marginTop: 20 }}\r\n            fontColor=\"textBgPrimary\"\r\n          />\r\n        </ScrollView>\r\n        {showBack && <BackButton setBackAction={setShowHD} />}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ChatBoxScreen;\r\n","import React from 'react';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport AuthScreen from './AuthScreen';\r\nimport RegisterScreen from './RegisterScreen';\r\nimport FAQScreen from '../FAQ/FAQScreen';\r\nimport ChatBoxScreen from '../ChatBox/ChatBoxScreen';\r\nimport FormStack from '../Form/FormStack';\r\nconst Stack = createStackNavigator();\r\n\r\nconst AuthStack = () => {\r\n    return (\r\n        <Stack.Navigator keyboardHandlingEnabled>\r\n            <Stack.Screen\r\n                name=\"AuthScreen\"\r\n                component={AuthScreen}\r\n                options={{\r\n                    headerShown: false,\r\n                }}\r\n            />\r\n            <Stack.Screen\r\n                name=\"RegisterScreen\"\r\n                component={RegisterScreen}\r\n                options={{\r\n                    headerShown: false,\r\n                }}\r\n            />\r\n            <Stack.Screen\r\n                name=\"FAQScreen\"\r\n                component={FAQScreen}\r\n                options={{\r\n                    headerShown: false,\r\n                }}\r\n            />\r\n            <Stack.Screen\r\n                name=\"ChatBoxScreen\"\r\n                component={ChatBoxScreen}\r\n                options={{\r\n                    headerShown: false,\r\n                }}\r\n            />\r\n        </Stack.Navigator>\r\n    );\r\n};\r\n\r\nexport default AuthStack;\r\n","import React, { useState } from 'react';\r\nimport { View, Dimensions } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport FormStack from './view/Form/FormStack'\r\nimport AuthStack from './view/Auth/AuthStack';\r\nimport { onAuthStateChanged, auth } from '../firebase';\r\nconst windowWidth = Dimensions.get('window').width;\r\nconst windowHeight = Dimensions.get('window').height;\r\n\r\nconst Main = () => {\r\n    const [logginState, setLogginState] = useState(false)\r\n    onAuthStateChanged(auth, (user) => {\r\n        if (user) {\r\n            // User is signed in, see docs for a list of available properties\r\n            // https://firebase.google.com/docs/reference/js/firebase.User\r\n            const uid = user.uid;\r\n            setLogginState(true)\r\n        } else {\r\n            // User is signed out\r\n            setLogginState(false)\r\n        }\r\n    });\r\n\r\n    return (\r\n        <NavigationContainer>\r\n            <View style={{\r\n                width: windowWidth,\r\n                height: windowHeight,\r\n            }}>\r\n                {logginState ?\r\n                    <FormStack />\r\n                    :\r\n                    <AuthStack />\r\n                }\r\n            </View>\r\n        </NavigationContainer>\r\n    );\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nimport {SafeAreaView,SafeAreaProvider} from 'react-native-safe-area-context';\r\nimport Main from './src/Main';\r\nimport Toast from 'react-native-toast-message';\r\n\r\nexport default function App() {\r\n  return (\r\n    <SafeAreaProvider>\r\n      <SafeAreaView>\r\n        <Main/>\r\n        <Toast/>\r\n      </SafeAreaView>\r\n    </SafeAreaProvider>\r\n  );\r\n}","module.exports = __webpack_public_path__ + \"static/media/finished.cb596494.png\";","module.exports = __webpack_public_path__ + \"static/media/avisos-03.a9de4547.png\";","module.exports = __webpack_public_path__ + \"static/media/avisos-01.6d620d0d.png\";","module.exports = __webpack_public_path__ + \"static/media/avisos-02.b344de10.png\";"],"sourceRoot":""}